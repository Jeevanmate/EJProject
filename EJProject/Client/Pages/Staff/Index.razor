@page "/staffs/"
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@attribute [Authorize]
@implements IDisposable
@inject HttpInterceptorService _interceptor

<h3 class="card-title">Staffs</h3>
<a href="/staffs/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Create New Staff
</a>
<br />

@if (Staffs == null)
{
    <div class="alert alert-info">Loading Staffs...</div>
}

else
{
    <table class="table table-responsive" id="staffsTable">
        <thead>
            <tr>
                <th>Name</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var staff in Staffs)
            {
                <tr>
                    <td>@staff.Name</td>
                    <td>
                        <a href="/staffs/view/@staff.StaffID" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/staffs/edit/@staff.StaffID" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(staff.StaffID))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {

    private List<Staff>? Staffs;

    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }


    async Task Delete(int staffId)
    {
        if (Staffs != null)
        {
            var staff = Staffs.First(q => q.StaffID == staffId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {staff.Name}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.StaffsEndpoint}/{staffId}");
                await OnInitializedAsync();
            }
        }
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#staffsTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#staffsTable");
    }
}