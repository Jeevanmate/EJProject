@page "/trades/create/"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Trades</h3>
<hr />
<br />

<EditForm Model="@trade" OnValidSubmit="CreateTrade">
    <DataAnnotationsValidator />
    <ValidationSummary />


<div class="form-group">
    <label>Buyer</label>
    <div>
        <InputSelect @bind-Value="trade.BuyerID" class="form-control">
            <option value="">-- Select Buyer --</option>
            @if (Buyers != null)
            {
                foreach (var buyer in Buyers)
                {
                    <option value="@buyer.BuyerID">@buyer.Name</option>
                }
            }
        </InputSelect>
        <ValidationMessage For="@(() => trade.BuyerID)" />
    </div>
</div>

<div class="form-group">
    <label>Quantity: </label>
    <div>
        <InputNumber @bind-Value="@trade.Quantity" class="form-control" />
        <ValidationMessage For="@(() =>trade.Quantity )" />
    </div>
</div>

<div class="form-group">
    <label>Trade Name: </label>
    <div>
        <InputText @bind-Value="@trade.TradeName" class="form-control" />
        <ValidationMessage For="@(() => trade.TradeName )" />
    </div>
</div>

<div class="form-group">
    <label>Location: </label>
    <div>
        <InputText @bind-Value="@trade.Location" class="form-control" />
        <ValidationMessage For="@(() => trade.Location )" />
    </div>
</div>

<div class="form-group">
    <label>Payment Method: </label>
    <div>
        <InputText @bind-Value="@trade.PaymentMethod" class="form-control" />
        <ValidationMessage For="@(() => trade.PaymentMethod )" />
    </div>
</div>


<button type="submit" class="btn btn-success btn-block">
    Create Trade
</button>

</EditForm>
@code {
    Trade trade = new Trade();

    private IList<Buyer>? Buyers;

    protected async override Task OnInitializedAsync()
    {
        Buyers = await _client.GetFromJsonAsync<List<Buyer>>($"{Endpoints.BuyersEndpoint}");
    }

    private async Task CreateTrade()
    {
        await _client.PostAsJsonAsync(Endpoints.TradesEndpoint, trade);
        _navManager.NavigateTo("/trades/");
    }
}
