@inject HttpClient _client


<EditForm Model="@trade" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <fieldset disabled = "@Disabled">
    <div class="form-group">
        <label>Buyer</label>
        <div>
            <InputSelect @bind-Value="trade.BuyerID" class="form-control">
                <option value="">-- Select Buyer --</option>
                @if (Buyers != null)
                {
                    foreach (var buyer in Buyers)
                    {
                        <option value="@buyer.BuyerID">@buyer.Name</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => trade.BuyerID)" />
        </div>
    </div>

    <div class="form-group">
        <label>Quantity: </label>
        <div>
            <InputNumber @bind-Value="@trade.Quantity" class="form-control" />
            <ValidationMessage For="@(() =>trade.Quantity )" />
        </div>
    </div>

    <div class="form-group">
        <label>Trade Name: </label>
        <div>
            <InputText @bind-Value="@trade.TradeName" class="form-control" />
            <ValidationMessage For="@(() => trade.TradeName )" />
        </div>
    </div>

    <div class="form-group">
        <label>Location: </label>
        <div>
            <InputText @bind-Value="@trade.Location" class="form-control" />
            <ValidationMessage For="@(() => trade.Location )" />
        </div>
    </div>

    <div class="form-group">
        <label>Payment Method: </label>
        <div>
            <InputText @bind-Value="@trade.PaymentMethod" class="form-control" />
            <ValidationMessage For="@(() => trade.PaymentMethod )" />
        </div>
    </div>

        <div class="form-group">
            <label>Payment Method:</label>
            <div>
                <InputSelect @bind-Value="trade.PaymentMethod" class="form-control">
                    <option value="">-- Select Payment Method --</option>

                    <option value="Cash">Cash</option>
                    <option value="Paynow"> Paynow</option>
                    <option value="Nets">Nets</option>
                    <option value="Cryptocurrency">Cryptocurrency</option>
                    <option value="Bank Transfer">Bank Transfer</option>

                </InputSelect>
                <ValidationMessage For="@(() => trade.PaymentMethod)" />
            </div>
        </div>
    </fieldset>
    @if(!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
   
    <BackToList Target="trades" />
</EditForm>
@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Trade? trade{ get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    private IList<Buyer>? Buyers;

    protected async override Task OnInitializedAsync()
    {
        Buyers = await _client.GetFromJsonAsync<List<Buyer>>($"{Endpoints.BuyersEndpoint}");
    }
}
